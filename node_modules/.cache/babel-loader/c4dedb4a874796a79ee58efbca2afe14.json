{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\n\nconst useCountdown = seconds => {\n  _s();\n\n  const [countdown, setCountdown] = useState(seconds);\n  const [isRunning, setIsRunning] = useState(true);\n  useEffect(() => {\n    if (isRunning) {\n      const interval = setInterval(() => {\n        setCountdown(prevCountdown => prevCountdown - 1);\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [isRunning]);\n  return [countdown, setIsRunning];\n};\n\n_s(useCountdown, \"iypg+2RebizyKxhqKYRLsFIeZkk=\");\n\nexport { useCountdown };","map":{"version":3,"names":["useEffect","useState","useCountdown","seconds","countdown","setCountdown","isRunning","setIsRunning","interval","setInterval","prevCountdown","clearInterval"],"sources":["C:/Users/sauls.DESKTOP-PNDI2L9/OneDrive/Escritorio/movie-app-main/src/hooks/useCountdown.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useCountdown = (seconds: number) => {\n  const [countdown, setCountdown] = useState(seconds);\n  const [isRunning, setIsRunning] = useState(true);\n\n  useEffect(() => {\n    if (isRunning) {\n      const interval = setInterval(() => {\n        setCountdown((prevCountdown) => prevCountdown - 1);\n      }, 1000);\n\n      return () => clearInterval(interval);\n    }\n  }, [isRunning]);\n\n  return [countdown, setIsRunning] as const;\n}\n\nexport { useCountdown };"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,MAAMC,YAAY,GAAIC,OAAD,IAAqB;EAAA;;EACxC,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAACE,OAAD,CAA1C;EACA,MAAM,CAACG,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,IAAD,CAA1C;EAEAD,SAAS,CAAC,MAAM;IACd,IAAIM,SAAJ,EAAe;MACb,MAAME,QAAQ,GAAGC,WAAW,CAAC,MAAM;QACjCJ,YAAY,CAAEK,aAAD,IAAmBA,aAAa,GAAG,CAApC,CAAZ;MACD,CAF2B,EAEzB,IAFyB,CAA5B;MAIA,OAAO,MAAMC,aAAa,CAACH,QAAD,CAA1B;IACD;EACF,CARQ,EAQN,CAACF,SAAD,CARM,CAAT;EAUA,OAAO,CAACF,SAAD,EAAYG,YAAZ,CAAP;AACD,CAfD;;GAAML,Y;;AAiBN,SAASA,YAAT"},"metadata":{},"sourceType":"module"}